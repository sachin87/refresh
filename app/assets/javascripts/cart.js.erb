$(function setupCart() {
  $('.new_cart_item').submit(addAsync);
  var cart = $('.cart');
  var cartIconMenu = $('.cart-icon-menu');
  var drawer = $('.drawer');
  setupBindings(cart);

  function setupBindings(cart) {
    cart.find('.close').click(function closeCart() {
      drawer.drawer('close');
    });
    cart.find('form:has(.remove-item-button)').submit(removeAsync);
    cart.find('form:has(.update-quantity)').submit(updateQuantityAsync);

    var cartItemsCount = calculateCartItemsCount(cart.find('.cart-item .quantity'));
    $('.cart-icon .badge, .cart-items-quantity').text(cartItemsCount);
    if (typeof product_id !== 'undefined') {
      if(delete_product){
        $('#product_count_' + product_id).text(0)
        $('#product_count_' + product_id).addClass('hide');
        $('#remove_one_' + product_id).addClass('hide')        
      }else{
        $('#product_count_' + product_id).text(parseInt($('#product_count_' + product_id).text()) + 1)
        $('#product_count_' + product_id).removeClass('hide');
        $('#remove_one_' + product_id).removeClass('hide');
      }
    }

    if (cartItemsCount == 0) {
      cartIconMenu.addClass("hide");
    } else {
      cartIconMenu.removeClass("hide");
    }
  }

  function showErrorMessage(message) {
    return function delayedFailureMessage() {
      new Alert({
        message: message,
        closeable: true,
        class: "alert-danger"
      });
    };
  }

  function updateCart(message) {
    return function delayedUpdateCart(cartHtml) {
      cart.html(cartHtml);
      setupBindings(cart);
      new Alert({
        message: message,
        closeable: true,
        autoclose: 1000
      });
    };
  }

  function calculateCartItemsCount(cartItems) {
    return cartItems
      .toArray()
      .map(getInt)
      .reduce(sum, 0);

    function getInt(element) {
      return parseInt(element.textContent);
    }

    function sum(acc, x) { return acc + x; }
  }

  function asyncSubmit(ev, form, method, successMessage, errorMessage) {
     data = form.serializeArray();
     delete_product = false
     if(data[4] === undefined){
      delete_product = true
      product_id = form.attr('action').split('=')[1];
     }else{
       product_id = data[4].value;
     }

    ev.preventDefault();
    $.ajax({
      url: form.attr("action"),
      method: method,
      data: form.serialize(),
      dataType: "html"
    })
    .done(updateCart(successMessage))
    .fail(showErrorMessage(errorMessage));
  }

  function addAsync(ev) {
    asyncSubmit(
      ev,
      $(this),
      "PATCH",
      "Item added to the cart!",
      "There was a problem adding the item to the cart."
    );
  }

  function removeAsync(ev) {
    asyncSubmit(
      ev,
      $(this),
      "DELETE",
      "Item removed from the cart!",
      "There was a problem removing the item from the cart."
    );
  }

  function updateQuantityAsync(ev) {
    asyncSubmit(
      ev,
      $(this),
      "PATCH",
      "Item quantity updated!",
      "There was a problem updating the item's quantity."
    );
  }
});
